/* -*- c++ -*- */
/*
 * Copyright 2015 Josh Blum <josh@joshknows.com>
 * Copyright 2013 Dimitri Stolnikov <horiz0n@gmx.net>
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <iostream>

#include <boost/assign.hpp>
#include <boost/format.hpp>
#include <boost/lexical_cast.hpp>

#include <gnuradio/io_signature.h>

#include "arg_helpers.h"
#include "soapy_source_c.h"

using namespace boost::assign;

/*
 * Create a new instance of soapy_source_c and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
soapy_source_c_sptr make_soapy_source_c (const std::string &args)
{
  return gnuradio::get_initial_sptr(new soapy_source_c (args));
}

/*
 * The private constructor
 */
soapy_source_c::soapy_source_c (const std::string &args)
  : gr::sync_block ("soapy_source_c",
                    gr::io_signature::make (0, 0, sizeof (gr_complex)),
                    gr::io_signature::make (1, 8, sizeof (gr_complex)))
{

}

bool soapy_source_c::start()
{
}

bool soapy_source_c::stop()
{
}

int soapy_source_c::work( int noutput_items,
                            gr_vector_const_void_star &input_items,
                            gr_vector_void_star &output_items )
{
}

std::vector<std::string> soapy_source_c::get_devices()
{
}

size_t soapy_source_c::get_num_channels( void )
{
}

osmosdr::meta_range_t soapy_source_c::get_sample_rates( void )
{
}

double soapy_source_c::set_sample_rate( double rate )
{
}

double soapy_source_c::get_sample_rate( void )
{
}

osmosdr::freq_range_t soapy_source_c::get_freq_range( size_t chan )
{
}

double soapy_source_c::set_center_freq( double freq, size_t chan )
{
}

double soapy_source_c::get_center_freq( size_t chan )
{
}

double soapy_source_c::set_freq_corr( double ppm, size_t chan )
{
}

double soapy_source_c::get_freq_corr( size_t chan )
{
}

std::vector<std::string> soapy_source_c::get_gain_names( size_t chan )
{
}

osmosdr::gain_range_t soapy_source_c::get_gain_range( size_t chan )
{
}

osmosdr::gain_range_t soapy_source_c::get_gain_range( const std::string & name,
                                                size_t chan )
{
}

bool soapy_source_c::set_gain_mode( bool automatic, size_t chan )
{
}

bool soapy_source_c::get_gain_mode( size_t chan )
{
}

double soapy_source_c::set_gain( double gain, size_t chan )
{
}

double soapy_source_c::set_gain( double gain,
                           const std::string & name,
                           size_t chan )
{
}

double soapy_source_c::get_gain( size_t chan )
{
}

double soapy_source_c::soapy_source_c::get_gain( const std::string & name, size_t chan )
{
}

double soapy_source_c::set_if_gain( double gain, size_t chan )
{
}

double soapy_source_c::set_bb_gain( double gain, size_t chan )
{
}

std::vector< std::string > soapy_source_c::get_antennas( size_t chan )
{
}

std::string soapy_source_c::set_antenna( const std::string & antenna,
                                   size_t chan )
{
}

std::string soapy_source_c::get_antenna( size_t chan )
{
}

void soapy_source_c::set_dc_offset_mode( int mode, size_t chan )
{
}

void soapy_source_c::set_dc_offset( const std::complex<double> &offset, size_t chan )
{
}

void soapy_source_c::set_iq_balance_mode( int mode, size_t chan )
{
}

void soapy_source_c::set_iq_balance( const std::complex<double> &balance, size_t chan )
{
}

double soapy_source_c::set_bandwidth( double bandwidth, size_t chan )
{
}

double soapy_source_c::get_bandwidth( size_t chan ) 
{
}

osmosdr::freq_range_t soapy_source_c::get_bandwidth_range( size_t chan )
{
}

void soapy_source_c::set_time_source(const std::string &source,
                               const size_t mboard)
{
}

std::string soapy_source_c::get_time_source(const size_t mboard)
{
}

std::vector<std::string> soapy_source_c::get_time_sources(const size_t mboard)
{
}

void soapy_source_c::set_clock_source(const std::string &source,
                                const size_t mboard)
{
}

std::string soapy_source_c::get_clock_source(const size_t mboard)
{
}

std::vector<std::string> soapy_source_c::get_clock_sources(const size_t mboard)
{
}

double soapy_source_c::get_clock_rate(size_t mboard)
{
}

void soapy_source_c::set_clock_rate(double rate, size_t mboard)
{
}

::osmosdr::time_spec_t soapy_source_c::get_time_now(size_t mboard)
{
}

::osmosdr::time_spec_t soapy_source_c::get_time_last_pps(size_t mboard)
{
}

void soapy_source_c::set_time_now(const ::osmosdr::time_spec_t &time_spec,
                            size_t mboard)
{
}

void soapy_source_c::set_time_next_pps(const ::osmosdr::time_spec_t &time_spec)
{
}

void soapy_source_c::set_time_unknown_pps(const ::osmosdr::time_spec_t &time_spec)
{
}
